#pragma once

#include "../DynamicArrayBase/DynamicArrayBase.htd"

template<typename Element>
class DynamicArray: public DynamicArrayBase<DynamicArray<Element>, Element> {
private:
    friend class DynamicArrayBase<DynamicArray<Element>, Element>;

    using Base = DynamicArrayBase<DynamicArray<Element>, Element>;

public:
    DynamicArray() noexcept = default;
    
    explicit DynamicArray(size_t size);

    ~DynamicArray() noexcept = default;

    DynamicArray(const DynamicArray& other) = delete;

    DynamicArray(DynamicArray&& other) noexcept = default;

    DynamicArray& operator=(const DynamicArray& other) = delete;

    DynamicArray& operator=(DynamicArray&& other) noexcept = default;

public:
    void push(const Element& element);

    void setElement(size_t index, const Element& element);

private:
    static Element* initialAllocation(size_t size);

private:
    void deAllocate() noexcept;

    void reAllocate(size_t capacity);
};

#include "DynamicArray.tci"