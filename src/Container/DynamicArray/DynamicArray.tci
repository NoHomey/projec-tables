#pragma once

#include "DynamicArray.htd"

template<typename Element>
DynamicArray<Element>::DynamicArray(size_t size)
: Base{size} { }

template<typename Element>
void DynamicArray<Element>::push(const Element& element) {
    Base::ensureCapacity();
    Base::array[Base::arraySize] = element;
    ++Base::arraySize;
}

template<typename Element>
void DynamicArray<Element>::setElement(size_t index, const Element& element) {
    if(Base::hasElementAt(index)) {
        Base::array[index] = element;
    } else if(index == Base::arraySize) {
        push(element);
    }
}

template<typename Element>
Element* DynamicArray<Element>::initialAllocation(size_t size) {
    return new Element[size];
}

template<typename Element>
void DynamicArray<Element>::deAllocate() noexcept {
    delete[] Base::array;
}
    
template<typename Element>
void DynamicArray<Element>::reAllocate(size_t capacity) {
    Element* temp = new Element[capacity];
    for(size_t index = 0; index < Base::arraySize; ++index) {
        temp[index] = Base::array[index];
    }
    delete[] Base::array;
    Base::array = temp;
}