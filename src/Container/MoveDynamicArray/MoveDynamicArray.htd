#pragma once

#include "../DynamicArrayBase/DynamicArrayBase.htd"

template<typename Element>
class MoveDynamicArray: public DynamicArrayBase<MoveDynamicArray<Element>, Element> {
private:
    friend class DynamicArrayBase<MoveDynamicArray<Element>, Element>;

    using Base = DynamicArrayBase<MoveDynamicArray<Element>, Element>;

public:
    MoveDynamicArray() noexcept = default;
    
    explicit MoveDynamicArray(size_t size);

    ~MoveDynamicArray() noexcept = default;

    MoveDynamicArray(const MoveDynamicArray& other) = delete;

    MoveDynamicArray(MoveDynamicArray&& other) noexcept = default;

    MoveDynamicArray& operator=(const MoveDynamicArray& other) = delete;

    MoveDynamicArray& operator=(MoveDynamicArray&& other) noexcept = default;

public:
    void push(Element&& element);

    void setElement(size_t index, Element&& element);

private:
    static Element* initialAllocation(size_t size);

private:
    void deAllocate() noexcept;

    void reAllocate(size_t capacity);
};

#include "MoveDynamicArray.tci"