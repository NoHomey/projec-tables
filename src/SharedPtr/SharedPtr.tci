#pragma once

#include "SharedPtr.htd"
#include <utility>

template <typename Type>
SharedPtr::ControlBlock<Type>::ControlBlock(Type&& value) noexcept
: counter{1}, value{std::move(value)} { }

template <typename Type>
SharedPtr::ControlBlock<Type>::ControlBlock(const Type& value) noexcept
: counter{1}, value{value} { }

template<typename Type>
SharedPtr::SharedPtr(Type&& value, Deleter deleter)
: SharedPtr{} {
    if(deleter != nullptr) {
        set(deleter, static_cast<void*>(new ControlBlock<Type>{std::move(value)}));
    }
}

template<typename Type>
SharedPtr::SharedPtr(const Type& value, Deleter deleter)
: SharedPtr{} {
    if(deleter != nullptr) {
        set(deleter, static_cast<void*>(new ControlBlock<Type>{value}));
    }
}

template<typename Type>
SharedPtr::ControlBlock<Type>* SharedPtr::castControlBlock() noexcept {
    return static_cast<ControlBlock<Type>*>(controlBlock);
}

template<typename Type>
const SharedPtr::ControlBlock<Type>* SharedPtr::castControlBlock() const noexcept {
    return static_cast<ControlBlock<Type>*>(controlBlock);
}

template<typename Type>
Type SharedPtr::getCopy() const noexcept {
    return castControlBlock<Type>()->value;
}

template<typename Type>
Type& SharedPtr::getRef() noexcept {
    return castControlBlock<Type>()->value;
}

template<typename Type>
const Type& SharedPtr::getConstRef() const noexcept {
    return castControlBlock<Type>()->value;
}

template<typename Type>
Type* SharedPtr::getPtr() noexcept {
    return &getRef<Type>();
}

template<typename Type>
const Type* SharedPtr::getConstPtr() const noexcept {
    return &getConstRef<Type>();
}

template<typename Type>
void SharedPtr::release() noexcept {
    delete castControlBlock<Type>();
    null();
}