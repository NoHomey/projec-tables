#pragma once

#include <cstddef>

class SharedPtr {
public:
    using Counter = unsigned long;

    using Deleter = void (*)(SharedPtr&);

private:
    template <typename Type>
    struct ControlBlock {
        Counter counter;
        Type value;

        ControlBlock(Type&& value) noexcept;
    };

public:
    SharedPtr() noexcept;

    SharedPtr(std::nullptr_t) noexcept;

    template<typename Type>
    SharedPtr(Type&& value, Deleter deleter);

    ~SharedPtr() noexcept;

    SharedPtr(const SharedPtr& other) noexcept;

    SharedPtr(SharedPtr&& other) = delete;

    SharedPtr& operator=(const SharedPtr& other) noexcept;

    SharedPtr& operator=(std::nullptr_t) noexcept;

    SharedPtr& operator=(SharedPtr&& other) = delete;

public:
    template<typename Type>
    Type getCopy() const noexcept;

    template<typename Type>
    Type& getRef() noexcept;

    template<typename Type>
    const Type& getConstRef() const noexcept;

    template<typename Type>
    Type* getPtr() noexcept;

    template<typename Type>
    const Type* getConstPtr() const noexcept;

    template<typename Type>
    void release() noexcept;

    bool operator==(const SharedPtr& other) const noexcept;

    bool operator!=(const SharedPtr& other) const noexcept;

    bool isNullPtr() const noexcept;

    Counter sharedBy() const noexcept;

private:
    void release() noexcept;

    void acquire() noexcept;

    template<typename Type>
    ControlBlock<Type>* castControlBlock() noexcept;

    Counter* getCounter() noexcept;

    void set(Deleter deleter, void* controlBlock) noexcept;

    void null() noexcept;

private:
    Deleter deleter;

    void* controlBlock;
};

#include "SharedPtr.tci"